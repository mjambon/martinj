#!/usr/bin/env python3
#
# Create the gallery html page from the list of images found in img/
# using the database artworks.csv
#

from dataclasses import dataclass
from datetime import date
from pathlib import Path
from typing import Any, Callable, Dict, List, Optional, Set, TextIO, Tuple
import argparse
import csv
import json
import html
import math
import os
import re
import subprocess

ALL_PATH = '/all'
IMG_PATH = '/img'
CSS_PATH = '/css'
SERIES_PATH = '/series'
ART_PATH = '/art'

VALID_TAGS = { 'for-rent', 'featured' }

NAVBAR_HTML = """
<div class="navbar">
  <a href="/">Paintings</a>
  <a href="/about">About</a>
  <a href="/contact">Contact</a>
  <a href="/meta">Meta</a>
</div>
"""

FAVICON_HTML = """
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
  <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
  <meta name="msapplication-TileColor" content="#da532c">
  <meta name="theme-color" content="#ffffff">
"""

MARTINJ_TEXT = 'Martin J.'
MARTINJ_HTML = f'<span style="color:#f44">{html.escape(MARTINJ_TEXT)}</span>'
MARTINJ_SEP_TEXT = "●"
MARTINJ_SEP_HTML = html.escape(MARTINJ_SEP_TEXT)


def read_file(filename: Path) -> str:
    res = ""
    with open(filename, "r") as file:
        res = file.read()
    return res


def hash_file(filename: Path) -> int:
    if os.path.exists(filename):
        return hash(read_file(filename))
    else:
        return hash('')


@dataclass
class GenericPage:
    title_text: str
    body_html_file: Path
    html_file: Path


GENERIC_PAGES: List[GenericPage] = [
    GenericPage(title_text=f"{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} Meta Gallery",
                body_html_file=Path("meta.html"),
                html_file=Path("meta/index.html"))
]


def make_generic_page(page: GenericPage) -> None:
    """ Create an HTML page using the generic template.

    Use this for any plain HTML page that doesn't need automation other
    that sharing the site's generic layout.
    """
    print(f"Creating {page.html_file}")
    body_html = read_file(page.body_html_file)
    html_dir = page.html_file.parent
    os.makedirs(html_dir, exist_ok=True)
    page_contents = f"""
<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>{html.escape(page.title_text)}</title>
  <link rel="stylesheet" href="{CSS_PATH}/generic.css" />
{FAVICON_HTML}
</head>
<body>
{NAVBAR_HTML}
<div>
{body_html}
</div>
</body>
</html>
"""
    with open(page.html_file, "w") as out:
        out.write(page_contents)


@dataclass
class Page:
    title_text: str
    title_html: str
    # HTML-formatted introduction that will be placed under the <h1>
    # containing the title.
    description_html: str
    # Folder containing the md and html files
    folder: str
    # Output file
    html_file: str
    # page-specific HTML data to insert at the beginning of the page
    page_specific_html: str
    # CSV rows of artworks to display
    rows: List[Dict[str, str]]


# The built-in '.capitalize()' method will downcase the rest of the string,
# which we don't want.
def capitalize_first_char(s: str) -> str:
    if len(s) > 0:
        return s[0].upper() + s[1:]
    else:
        return s

# Zero-width matching just before a letter that should be capitalized
# according to English usage.
# This works only for standard English letters a-z.
WORD_START_RE = r"(?:^|(?<=\s))(?=[a-z])"

# Because '.title()' does a shit job.
#
# This capitalizes too much. Capitalization rules for English require
# distinguishing nouns from other words, which requires a dictionary.
# Let's not use this function.
def capitalize_all_words(s: str) -> str:
    return "".join([ capitalize_first_char(word)
                     for word in re.split(WORD_START_RE, s) ])

def capitalize_fr(s: str) -> str:
    return capitalize_first_char(s)

def capitalize_en(s: str) -> str:
    return capitalize_first_char(s)

# Uses 'identify' from ImageMagick
def image_dimensions(image_filename: str) -> Tuple[int, int]:
    p = subprocess.run([
        "identify",
        "-format",
        '{"height":%[fx:h], "width":%[fx:w]}',
        image_filename
    ], capture_output=True)
    out = p.stdout.decode()
    dic = json.loads(out)
    return (dic['height'], dic['width'])

def figure_scaling(image_filename: str) -> float:
    (height, width) = image_dimensions(image_filename)
    aspect_ratio = float(width) / float(height)
    # sqrt(2) is the aspect ratio of A5, A4, A3, etc.
    max_aspect_ratio = math.sqrt(2.)
    if aspect_ratio >= max_aspect_ratio:
        return 1.0
    else:
        return math.sqrt(aspect_ratio / max_aspect_ratio)

def needs_rebuild(src_files: List[str], dst_file: str) -> bool:
    if not os.path.isfile(dst_file):
        return True
    for src_file in src_files:
        if os.path.getmtime(dst_file) < os.path.getmtime(src_file):
            return True
    return False

def inches_to_cm(x: float) -> float:
    return 2.54 * x

def format_dimensions(row: Dict[str, str]) -> Optional[str]:
    width_cm = -1.0
    height_cm = -1.0
    if row['width_in'] and row['height_in']:
        width_cm = inches_to_cm(float(row['width_in']))
        height_cm = inches_to_cm(float(row['height_in']))
    if row['width_cm'] and row['height_cm']:
        width_cm = float(row['width_cm'])
        height_cm = float(row['height_cm'])
    if width_cm > 0:
        return f"{height_cm:.0f} cm × {width_cm:.0f} cm"
    else:
        return None

def format_support(row: Dict[str, str]) -> Optional[str]:
    support = row['support']
    if support:
        return support
    else:
        return None

def format_location(row: Dict[str, str]) -> Optional[str]:
    gk = row['guardian_kind']
    if gk == 'private' or gk == 'family':
        return 'Private collection'
    elif gk == 'ephemeral' or gk == 'recycled':
        return 'Ephemeral'
    else:
        return None

def verbose_command(argv: List[str]) -> None:
    print(f"{' '.join(argv)}")
    subprocess.run(argv)

def get_title(row: Dict[str, str]) -> str:
    title_en = capitalize_en(row['title_en'])
    title_fr = capitalize_fr(row['title_fr'])
    title_lang = row['title_lang']
    title1 = None
    title2 = None
    if title_lang == "en":
        title1 = title_en
        title2 = title_fr
    elif title_lang == "fr":
        title1 = title_fr
        title2 = title_en
    elif title_lang:
        raise Exception(f"Unsupported language '{title_lang}' in row {row}")
    if title1:
        title = title1
        if title2 and title2 != title1:
            title = f"{title} ({title2})"
        return title
    else:
        return 'Untitled'


def get_img_page_url(row: Dict[str, str]) -> str:
    return f"{ART_PATH}/{row['artwork_id']}"


def format_extra_credits(row: Dict[str, str]) -> str:
    extra_credits_text = row['extra_credits']
    if extra_credits_text:
        license_name = row['license_name']
        license_url = row['license_url']
        return f"""
<div>
  {html.escape(extra_credits_text)}. Distributed under the terms of
  <a href="{html.escape(license_url)}">{html.escape(license_name)}</a>
</div>
"""
    else:
        return ''


# 2022-09-08 -> September 2022
def reformat_date(isodate: str) -> str:
    date_ = date.fromisoformat(isodate)
    return f"{date_.strftime('%B')} {date_.year}"


# Create an animated gif from a collection of images
def make_animated_gif(
        src_paths: List[str],
        dst_path: str,
        force: bool = False) -> None:
    if force or needs_rebuild(src_paths, dst_path):
        verbose_command(
            [
                "convert",
                # fragile: requires original to fit:
                "-extent", "800x666",
                "-gravity", "center",
                 # coupling: must match page background color:
                "-background", "white",
                "-dispose", "background",
                "-delay", "200",  # * 0.01 s
            ] + src_paths + [dst_path]
        )


def make_featured_gallery(
        artwork_rows: List[Dict[str, str]],
        force: bool = False
) -> None:
    src_paths = [f"img/medium/{row['image_id']}.jpg" for row in artwork_rows]
    dst_path = 'img/other/featured.gif'
    make_animated_gif(src_paths, dst_path, force=force)


def make_standalone_page(row: Dict[str, str]) -> None:
    artwork_id = row['artwork_id']
    img_id = row['image_id']
    date_str = reformat_date(row['date'])
    title = get_title(row)
    img_name = img_id + '.jpg'
    hash_name = img_id

    img_url = IMG_PATH + '/large/' + img_name
    html_dir = 'art/' + artwork_id
    html_file = html_dir + '/index.html'
    os.makedirs(html_dir, exist_ok=True)

    # URL to this artwork on the gallery listing
    gallery_url = f"{ALL_PATH}#{hash_name}"

    main_caption = f"{title}"
    main_caption_html = f"""
<div>
  {html.escape(main_caption)}
</div>
"""

    dimensions = format_dimensions(row)
    support = format_support(row)
    location = format_location(row)
    dim_html = ""
    if dimensions:
        line = dimensions
        if support:
            line += f", {support}"
        dim_html = f"""
<div style='font-size: 80%'>{html.escape(line)}</div>
"""

    extra_credits = format_extra_credits(row)
    author_html = f"""
<div class="main_caption">
  Martin J., {date_str}
  <a href="https://www.instagram.com/martinjambon/">
    <img src="{IMG_PATH}/other/instagram-logo.png"
        title="Instagram"
        style="height:1em;padding:0em 0.5em;vertical-align:middle;opacity:0.5">
  </a>
  {extra_credits}
</div>
"""

    loc_html = ""
    if location:
        loc_html = f"""
<div style='font-style: italic'>{html.escape(location)}</div>
"""

    page_contents = f"""
<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>{html.escape(title)}</title>
{FAVICON_HTML}
  <link rel="stylesheet" href="{CSS_PATH}/generic.css" />
  <style type="text/css">
    body {{
      /* override site-wide default */
      max-width: 120ex;
    }}

    figure {{
      margin-top: 4em;
      margin-bottom: 3em;
      text-align: center;
    }}

    img.artwork {{
      max-height: 100ex;
      max-width: 100%;
      object-fit: contain;
      text-align: left;
    }}

    figcaption {{
      display: inline-block;
      width: 70%;
      color: grey;
      margin-top: 3em;
    }}

    figcaption a {{
      color: inherit;
      text-decoration: none;
    }}
  </style>
</head>
<body>
{NAVBAR_HTML}
  <figure>
    <img class="artwork" src="{img_url}"/>
    <figcaption>
      <a href="{html.escape(gallery_url)}"
         title="view in gallery">
        {main_caption_html}{author_html}
        <div style="margin:1em 0em">
          {dim_html}{loc_html}
        </div>
      </a>
    </div>
  </figure>
</body>
</html>
"""
    with open(html_file, "w") as out:
        out.write(page_contents)


# Print an artwork on a page showing a series.
def print_series_row(row: Dict[str, str],
              html_file: TextIO,
              generate_dependencies: bool = False,
              force: bool = False) -> None:
    img_id = row['image_id']
    date_str = reformat_date(row['date'])
    title = get_title(row)
    img_name = img_id + '.jpg'
    hash_name = img_id

    medium = 'img/medium/' + img_name
    small = 'img/small/' + img_name
    if generate_dependencies:
        make_standalone_page(row)

        # Generate images of different sizes
        orig = 'img/original/' + img_name

        large = 'img/large/' + img_name
        # JPEG image quality. Default quality is 92, max is 100.
        quality = "95"
        if force or needs_rebuild([orig], large):
            verbose_command(["convert", "-resize", "1600x1600",
                             "-quality", quality,
                             orig, large])

        if force or needs_rebuild([orig], medium):
            verbose_command(["convert", "-resize", "800x800",
                             "-quality", quality,
                             large, medium])

        if force or needs_rebuild([orig], small):
            verbose_command(["convert", "-resize", "400x400",
                             "-quality", quality,
                             medium, small])

        # Padded square images for Instagram
        square = 'img/square/' + img_name
        if force or needs_rebuild([orig], square):
            verbose_command([
                "convert",
                orig,
                "-resize", "1450x1450>",
                "-background", "#eee",
                "-gravity", "center",
                "-extent", "1600x1600",
                "-quality", quality,
                square
            ])

    # This resizes the image on the page so that all images have the same
    # surface area. (except for those which are too wide, which will be
    # rendered with a smaller surface area)
    fig_margin = int((1.0 - figure_scaling(small)) / 2 * 100)

    medium_img_url = IMG_PATH + '/medium/' + img_name

    extra_credits = format_extra_credits(row)

    main_caption = f"{title}"
    # Fragile: pandoc really wants to insert <p> elements but we're trying
    # to avoid that. The backslash below disables the insertion of <p>.
    main_caption_html = f"""
<div class="main_caption">
  {html.escape(main_caption)}
  {extra_credits}
  <a href="#{html.escape(hash_name)}"
     title="Direct link to artwork"
     class="hash_link">#</a>\
</div>
"""

    dimensions = format_dimensions(row)
    support = format_support(row)
    location = format_location(row)
    dim_html = ""
    if dimensions:
        line = dimensions
        if support:
            line += f", {support}"
        dim_html = f"""
<div style='font-size: 80%'>{html.escape(line)}</div>
"""

    author_html = f"""
<div class="main_caption">\
  Martin J., {date_str}\
  <a href="https://www.instagram.com/martinjambon/">
    <img src="{IMG_PATH}/other/instagram-logo.png"
         title="Instagram"
         style="height:1em;padding:0em 0.5em;vertical-align:middle;opacity:0.6"/>
  </a>
</div>
"""

    loc_html = ""
    if location:
        loc_html = f"""
<div style='font-style: italic'>{html.escape(location)}</div>\
"""

    # Write to main page
    img_page_url = get_img_page_url(row)
    html_file.write(
f"""
<a name="{html.escape(hash_name)}">
<figure style="margin: 0px {fig_margin}%; padding-top: 40px">
  <a href="{html.escape(img_page_url)}">
    <img src="{html.escape(medium_img_url)}"
         alt="abstract art"
         class="artwork"/>
  </a>
  <figcaption>
    {main_caption_html}{author_html}
    <div style="margin:0.5em 0em">{dim_html}{loc_html}</div>
  </figcaption>
</figure>
"""
    )


def generate_series(
        page: Page,
        generate_dependencies: bool,
        force: bool = False) -> None:
    print(f"### Generating {page.html_file}")
    rows = page.rows
    with open(page.html_file, 'w') as out:
        out.write(
        f"""
<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>{html.escape(page.title_text)}</title>
{FAVICON_HTML}
  <link rel="stylesheet" href="{CSS_PATH}/generic.css" />
  <style type="text/css">
/* Override site-wide style */
body {{
  font-family: sans-serif;
}}

/* Disable zoom-in on hover on touchscreens */
@media (hover: hover) {{
  .artworks:hover img.artwork {{
    opacity: 0.2;
  }}

  .artworks:hover img.artwork:hover {{
    opacity: 1.0;

    /* place the image in the foreground when zooming in */
    z-index: 1;
  }}

  img.artwork:hover {{
    /* zoom on hover */
    transform: scale(1.6);
  }}

  img.artwork {{
    transition: transform .2s;
  }}
}}

img.artwork {{
  /* grey frame around each artwork image */
  background-color:#eee;
  padding: 3%;
  width: 94%;

  position: relative;
  z-index: 0;
}}

figcaption {{
  margin: 1em 0em;
}}

.hash_link {{
  visibility: hidden;
}}

/* Make the hash-link only visible when hovering over the title. */
.main_caption:hover .hash_link {{
  visibility: visible;
  color: #999;
}}
  </style>
</head>
<body>
{NAVBAR_HTML}
<h1>{page.title_html}</h1>
{page.description_html}
<div class="artworks">
"""
    )
        for row in rows:
            if row['show'] == '1':
                print_series_row(row, out, generate_dependencies, force=force)
        out.write(
        """
</div>
<p class="bureaucratic" style="margin:4em 0em">
  All artworks on <a href="https://martinj.art/">martinj.art</a>
  ©&nbsp;2022&ndash;2023
  by <a href="https://mjambon.com">Martin Jambon</a>
  are licensed under
  <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC&nbsp;BY-NC-ND&nbsp;4.0</a>
  unless stated otherwise.

  <!-- proof of ownership for Mastodon -->
  <a rel="me" href="https://qoto.org/@mjambon"></a>
</p>
</body>
</html>
"""
        )


# Print what represents a series on the main page.
def print_link_to_series(
        html_file: TextIO,
        series_url: str,
        img_id: str,
        title: str,
        ring_color: str,
        ring_thickness: str) -> None:
    img_name = f'{img_id}.jpg'
    img_url = f'{IMG_PATH}/small/{img_name}'

    # no whitespace between inline blocks to avoid undesirable spacing
    row_html = f"""
<a href="{html.escape(series_url)}"
   class="series_link">
<div class="hexgrid-cell">
  <div class="hexgrid-square">
    <div class="shadowbox"></div>
    <div class="textbox">{html.escape(title)}</div>
    <div class="outer-disk" style="background-color:{ring_color}"></div>
    <div class="inner-disk" style="--ring-thickness:{ring_thickness}">
      <img class="artwork" src="{html.escape(img_url)}"/>
    </div>
  </div>
</div>
</a>
"""
    # Write to main page
    html_file.write(row_html)


# Find the first element in a list that matches some condition
def find(items: List[Any], cond: Callable[[Any], Any]) -> Any:
    for item in items:
        if cond(item):
            return item
    return None


def count_items_in_series(artwork_rows:
                          List[Dict[str, str]]) -> Dict[str, int]:
    counts: Dict[str, int] = {}
    for row in artwork_rows:
        if 'series' in row:
            series_id = row['series']
            if series_id:
                if series_id in counts:
                    counts[series_id] = counts[series_id] + 1
                else:
                    counts[series_id] = 1
    print(counts)
    return counts


def generate_archive(
        html_file: str,
        artwork_rows: List[Dict[str, str]],
        series_rows: List[Dict[str, str]],
        force: bool = False) -> None:
    print(f"### Generating {html_file}")
    with open(html_file, 'w') as out:
        out.write(
        f"""<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} Art by Martin Jambon</title>
{FAVICON_HTML}
  <link rel="stylesheet" href="{CSS_PATH}/generic.css" />
  <style type="text/css">
body {{
  max-width: 100ex;
}}

/* Hexagonal grid.

   The hexagonal grid uses the following levels of containers:
   - main: root container, sets display=flex
   - container: the actual container of cells
   - container::before: invisible pseudo-element to which we give a shape
     that forces an indentation of a half cell every other row.
   - cell: a rectangular container that can fit a hexagon with the pointy
     ends at the top and bottom.
   - square: a square container that can fit a circle with the same center
     as the hexagon of the hexagonal grid. Rounding the corners of the
     square produces a circle that's perfectly packed and touches 6 neighbors.

   See the prototype in misc/hexagons.html for an uncluttered example.
*/
.hexgrid-main {{
  display: flex;

  /* Hexagon dimensions */
  --hex-side: 120px;
  --hex-min-dim: calc(1.732 * var(--hex-side)); /* width */
  --hex-max-dim: calc(2 * var(--hex-side)); /* height */

  /* Vertical offset from one cell to the next */
  --period: calc(1.5 * var(--hex-side));

  /* Top and bottom padding that makes each cell a square that fits a
     circle rather than the rectangle that fits a hexagon. */
  --square-padding: calc(0.5 * (var(--hex-max-dim) - var(--hex-min-dim)));

  /* How much the disks should fill the available space */
  --disk-space-fill: 95%;
}}

@media (hover: hover) {{
  .shadowbox {{
    /* fade in and out */
    visibility: hidden;
    opacity: 0;
    transition: 0.3s;

    width: var(--disk-space-fill);
    height: var(--disk-space-fill);
    border-radius: 50%;

    /* position:relative or position:absolute is needed for z-index
       to take effect */
    z-index: 2;

    /* center it */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    background-color: rgba(0, 0, 0, 0.4);
  }}

  .hexgrid-square:hover .shadowbox {{
    visibility: visible;
    opacity: 1;
  }}

  .textbox {{
    /* Fade in and out. The text is invisible (fully transparent) on desktop */
    opacity: 0;
    transition: 0.3s;
  }}

  .hexgrid-square:hover .textbox {{
    opacity: 1;
    background-color: #0000; /* transparent */
  }}
}}

.hexgrid-container {{
  /* Disable whitespace between inline block elements */
  font-size: 0;

  /*
     The bottom end of the container sometimes doesn't go far enough.
     No idea what's going on. Adding a big margin sort of works
     around the problem.
  */
  margin-bottom: calc(1 * var(--hex-max-dim));
}}

/* for debugging */
.hexgrid-container div:nth-child(odd) {{
  /* background: #0f08; */
}}

.hexgrid-container::before {{
  content: "";
  width: calc(0.5 * var(--hex-min-dim));
  float: left;
  height: 120%;
  shape-outside:
    repeating-linear-gradient(
      transparent 0 calc(1.8 * var(--period)),
      black calc(1.8 * var(--period)) calc(1.9 * var(--period)),
      transparent calc(1.9 * var(--period)) calc(2 * var(--period)));
}}

/* rectangular grid cell suitable to fit a hexagon */
.hexgrid-cell {{
  width: var(--hex-min-dim);
  height: calc(var(--hex-max-dim) - 2 * var(--square-padding));
  display: inline-block;
  font-size: initial;
  /* background: #f008; */

  margin-bottom: calc(-0.5 * var(--hex-side));
  padding: var(--square-padding) 0; /* top and bottom padding */
}}

/* square container suitable to fit a circle */
.hexgrid-square {{
  /* background-color: blue; */
  border-radius: 50%;
  width: 100%;
  height: 100%;

  /* Allow text centering relative to this element in descendant elements */
  position: relative;

  /* Hide the corner of images */
  overflow: clip;
}}

/*
   A decorative ring behind the image:
   - outer-disk: color disk placed behind the inner disk
   - inner-disk: smaller disk containing the image

   The actual color and thickness of each ring is adjusted with
   inline style instructions.
*/
.outer-disk {{
  border-radius: 50%;
  width: var(--disk-space-fill);
  height: var(--disk-space-fill);
  background-color: teal; /* sample value, customized later */

  /* center it */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  /* place it behind the image */
  z-index: -1;
}}

.inner-disk {{
  --ring-thickness: 20%; /* sample value, customized later */
  border-radius: 50%;
  width: calc(100% - var(--ring-thickness));
  height: calc(100% - var(--ring-thickness));

  /* center it */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  overflow: clip;
}}

.textbox {{
  color: white;
  font-size: 100%;
  font-weight: bold;
  line-height: normal;

  /* add a background for better readability (mobile) */
  background-color: #8888;
  padding: 0.2em;
  border-radius: 1em;

  /* center within the cell */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  /* text justification */
  text-align: center;

  /* show text over the image on mobile devices */
  z-index: 3;
}}

.series_link, .series_link:hover {{
  text-decoration: none;
}}

img.artwork {{
  position: absolute;
  height: 100%;
  width: 100%;
  object-fit: cover;
  transform: scale(1.6);

  /* center */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  /* Clip anything outside of the image's container */
  overflow: clip;
}}
</style>
</head>
<body>
{NAVBAR_HTML}
<h1>{MARTINJ_HTML} {MARTINJ_SEP_HTML} Art</h1>
<p>
  <a href="tag/featured"
     title="Go to gallery view">
     <img src="/img/other/featured.gif"
          alt="selection of abstract paintings"
          style="margin-bottom: 2em; max-width: 100%" />
  </a>
</p>
<div class="hexgrid-main">
<div class="hexgrid-container">
"""
    )

        latest_img_id = find(artwork_rows,
                             lambda row: (row['show'] == '1'))['image_id']
        series_counts = count_items_in_series(artwork_rows)
        print_link_to_series(
            html_file=out,
            series_url=ALL_PATH,
            img_id=latest_img_id,
            title="Latest",
            ring_color="gray",
            ring_thickness="20%"
        )
        nbsp = " "  # nonbreaking space
        for row in series_rows:
            series_id = row['series_id']
            series_url = f'{SERIES_PATH}/{series_id}'
            img_id = row['image_id']
            count = series_counts[series_id] \
                if series_id in series_counts else 0
            title = f"{row['short_description_en']}"
            date_text = row['date_text']
            if date_text:
                title = f"{title} {html.escape(date_text)}"
            if count > 0:
                title = f"{title} ({count}{nbsp}artworks)"
            ring_color=row['ring_color']
            ring_thickness=row['ring_thickness']
            print_link_to_series(
                html_file=out,
                series_url=series_url,
                img_id=img_id,
                title=title,
                ring_color=ring_color,
                ring_thickness=ring_thickness
            )
        out.write(
        f"""
</div>
</div>
{read_file(Path("archive-page-text.html"))}
</body>
</html>
"""
        )


def generate_about(html_file: str) -> None:
    print(f"### Generating {html_file}")
    with open(html_file, 'w') as out:
        out.write(
        f"""<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} Art by Martin Jambon</title>
{FAVICON_HTML}
  <link rel="stylesheet" href="{CSS_PATH}/generic.css" />
  <style type="text/css"></style>
</head>
<body>
{NAVBAR_HTML}
<h1>{MARTINJ_HTML} {MARTINJ_SEP_HTML} Art</h1></div>
</div>
{read_file(Path("about-page-text.html"))}
</body>
</html>
"""
        )


def generate_contact(html_file: str) -> None:
    print(f"### Generating {html_file}")
    with open(html_file, 'w') as out:
        out.write(
        f"""<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name=viewport content="width=device-width, initial-scale=1">
  <title>{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} Art by Martin Jambon</title>
{FAVICON_HTML}
  <link rel="stylesheet" href="{CSS_PATH}/generic.css" />
  <style type="text/css"></style>
</head>
<body>
{NAVBAR_HTML}
<h1>{MARTINJ_HTML} {MARTINJ_SEP_HTML} Art</h1></div>
</div>
{read_file(Path("contact-page-text.html"))}
</body>
</html>
"""
        )


def load_artworks_csv() -> List[Dict[str, str]]:
    with open('artworks.csv', 'r') as csvfile:
        row_reader = csv.DictReader(csvfile)
        return list(row_reader)


def load_series_csv() -> List[Dict[str, str]]:
    with open('series.csv', 'r') as csvfile:
        row_reader = csv.DictReader(csvfile)
        return list(row_reader)


# Group artworks by series ID
def extract_series(series_rows: List[Dict[str, str]],
                   artwork_rows: List[Dict[str, str]]) -> List[Page]:
    series_tbl = { row['series_id']:row for row in series_rows }
    artwork_groups: Dict[str, List[Dict[str,str]]] = {}
    for row in artwork_rows:
        key = row['series']
        if not key:
            key = 'other'
        if key:
            if key in artwork_groups:
                artwork_groups[key].append(row)
            else:
                artwork_groups[key] = [row]
    def create_page(series_id: str, rows: List[Dict[str,str]]) -> Page:
        row = series_tbl[series_id]
        title_text = f"{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} {row['short_description_en']}"
        title_html = f"{MARTINJ_HTML} {MARTINJ_SEP_HTML} {html.escape(row['short_description_en'])}"
        description_html = row['description_html']
        os.makedirs(f'series/{series_id}', exist_ok=True)
        return Page(
            title_text=title_text,
            title_html=title_html,
            description_html=description_html,
            folder=f'series/{series_id}',
            html_file=f'series/{series_id}/index.html',
            page_specific_html='',
            rows=rows
        )
    return [ create_page(series_id, rows)
             for series_id, rows in artwork_groups.items() ]


def parse_tags(tags: str) -> List[str]:
    return [ tag.strip() for tag in tags.split(',')]


# Filter artworks by tag. Each artwork can have multiple tags.
# Only some tags are valid, the rest are ignored.
def extract_tags(
        valid_tags: Set[str],
        artwork_rows: List[Dict[str, str]]
) -> Dict[str, List[Dict[str,str]]]:
    tagged_sets: Dict[str, List[Dict[str,str]]] = {}
    for row in artwork_rows:
        tags = parse_tags(row['tags'])
        for tag in tags:
            if tag in valid_tags:
                if tag in tagged_sets:
                    tagged_sets[tag].append(row)
                else:
                    tagged_sets[tag] = [row]
    return tagged_sets


# Return (text title, html title) for a tag.
def title_of_tag(tag: str) -> Tuple[str, str]:
    if tag == "featured":
        return ( f"{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} Art by Martin Jambon",
                 f"{MARTINJ_HTML} {MARTINJ_SEP_HTML} Art" )
    else:
        return ( f"{MARTINJ_TEXT} #{tag}",
                 f"{MARTINJ_HTML} #{tag}" )


def create_tag_pages(
        tagged_sets: Dict[str, List[Dict[str,str]]]
) -> Dict[str, Page]:

    def create_page(tag: str, rows: List[Dict[str,str]]) -> Page:
        title_text, title_html = title_of_tag(tag)
        os.makedirs(f'tag/{tag}', exist_ok=True)
        return Page(
            title_text=title_text,
            title_html=title_html,
            description_html=f'',
            folder=f'tag/{tag}',
            html_file=f'tag/{tag}/index.html',
            page_specific_html='',
            rows=rows
        )
    return { tag:create_page(tag, rows)
             for tag, rows in tagged_sets.items() }


def make_generic_pages() -> None:
    for page in GENERIC_PAGES:
        make_generic_page(page)


def main() -> None:
    parser = argparse.ArgumentParser(description='Generate the website.')
    parser.add_argument('--force', action='store_true',
                    help='resize all images rather than being lazy about it')
    args = parser.parse_args()

    os.makedirs('img/large', exist_ok=True)
    os.makedirs('img/medium', exist_ok=True)
    os.makedirs('img/small', exist_ok=True)

    artwork_rows = load_artworks_csv()
    series_rows = load_series_csv()

    # Generic pages
    make_generic_pages()

    # Archive (former main page)
    generate_archive('archive/index.html',
                     artwork_rows, series_rows, force=args.force)

    # Other handwritten pages
    generate_about('about/index.html')
    generate_contact('contact/index.html')

    # All artworks
    os.makedirs('all', exist_ok=True)
    page_all = Page(
        title_text=f"{MARTINJ_TEXT} {MARTINJ_SEP_TEXT} All Artworks",
        title_html=f"{MARTINJ_HTML} {MARTINJ_SEP_HTML} All Artworks",
        description_html=(
            "<p>This is the full gallery in reverse chronological order.</p>"
        ),
        folder='all',
        html_file='all/index.html',
        page_specific_html='This is everything.',
        rows=artwork_rows
    )
    generate_series(page_all, generate_dependencies=True, force=args.force)

    # Series
    os.makedirs('series', exist_ok=True)
    series_pages = extract_series(series_rows, artwork_rows)
    for page in series_pages:
        generate_series(page, generate_dependencies=False, force=args.force)

    # Tags
    os.makedirs('tag', exist_ok=True)
    tagged_sets = extract_tags(VALID_TAGS, artwork_rows)
    tag_pages = create_tag_pages(tagged_sets)

    featured_page_path = Path(tag_pages["featured"].html_file)
    old_featured_hash = hash_file(featured_page_path)
    for tag, page in tag_pages.items():
        generate_series(page, generate_dependencies=False, force=args.force)
    new_featured_hash = hash_file(featured_page_path)

    # Make an animated gif from entries with the 'featured' tag:
    force_gif = args.force or old_featured_hash != new_featured_hash
    make_featured_gallery(tagged_sets["featured"],
                          force=force_gif)


main()
